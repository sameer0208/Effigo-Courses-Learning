Spring Framework:
1. Tight Coupling
2. Loose Coupling
3. Dependency Injection
4. IOC Container
5. Application Context
6. Spring Beans
7. Auto Wiring
8. Component Scan

Project structure:
Project name-->
	src/main/java - where we will be storing our source files
	src/main/resources - where we will be storing our 
	src/test/java - where we will write our test code

Spring Initializr: Website to quickly create Spring Projects.
Maven: Java dependency management tool

Game Runner Application

Iteration1: Tightly coupled java code 
	a. GameRunner Class
	b. Game Classes: Mario, SuperContra, Pacman, etc.

Iteration2: Loose coupling - interfaces
	a. GameRunner Class
	b. GamingConsole interface
		>Game classes: Mario, SuperContra, Pacman, etc.

Iteration3: Loose Coupling - Spring Level 1
	a. Spring Beans
	b. Spring framework will manage objects and wiring

Iteration4: Loose Coupling - Spring Level 2
	a. Spring Annotations
	b. Spring framework will create, manage and auto-wire objects

Coupling: how much work is involved in changing something
e.g. an engine is tightly coupled to a car, whereas a wheel is loosely coupled to a car.

Tightly Coupled Meaning:
e.g. if I am making gamerunner class and in that passing the value of object of mario game in its constructor and then if I created super contra game then I will get an error because game runner is taking mario game object which means it is tightly coupled to the mario game.

What is Spring Container/Context/IOC (Inversion Of Control) Container?
Spring container manages spring beans and their lifecycle.
POJOs            Config
   |              |
   ----------------
 	   |
     IOC Container
	   |
      Ready System
There are two popular types of IOC Container:
1. Bean factory: basic spring container
2. Application context: advanced spring container with enterprise-specific features -
	> Easy to use in web applications
	> Easy internationalization
	> Easy integration with Spring AOP (Aspect Oriented Programming)
Most enterprise applications use Application context.
Recommended for web applications, web services, REST API and microservices.

POJO vs Java Bean vs Spring Bean
POJO (Plain Old Java Object) - Any java object is POJO
class POJO
{
	private String text;
	private int number;
	public String toString()
	{
		return text+":"+number;
	}
}

class JavaBean implements Serializable
{  //EJB (Enterprise Java Bean)
//1. It should have public no argument constructor
	public JavaBean() //it will be there by default even if we are not adding
	{
	}
	private String text;
	private int number;
//2. it should have getters and setters
public String getText()
{
	return text;
}
public String setText(String text)
{
	this.text = text;
}
public String getNumber()
{
	return number;
}
public String setNumber(int number)
{
	this.number = number;
}
//3. Serializable (which we implemented in beginning of class definition
}
If we are doing the above mentioned things in a class then the instance of a class will be a javabean.

Spring Beans - Anything which is managed by the Spring framework is called Spring Beans

How to list all beans managed by Spring Framework?
Arrays.stream(context.getBeanDefinitionNames())
                .forEach(System.out::println);

What if multiple matching beans are available?
Then use @Primary with one the bean to resolve this problem, whenever Type.class will be called the primary bean will be executed.
@Bean(name = "address2")
    @Primary
    public Address address()
    {
        return new Address("Hitech City", "Purva Summit");
    }
			       (Or)
Use @Qualifier:
@Bean(name = "address3")
    @Qualifier("address3Qualifier")
    public Address address3()
    {
        return new Address("Motinagar", "Hyderabad");
    }
@Bean
    public Person person5Qualifier(String name, int age, @Qualifier("address3Qualifier") Address address)
    {
        return new Person(name, age, address);
    }


Q. Spring is managing objects and performing auto-wiring. But aren't we writing the code to create objects? How do we get Spring to create objects for us?
Ans. Yes Spring will create objects for us based on the @Component and @ComponentScan annotation


Q. Is spring really making this easy?

In upcoming we will do:
1. Simpler code
2. More annotations
3. @Primary vs @Qualifier
4. More Terminology
5. Dependency Injection
6. Dependency Injection types
7. Real World Spring Example

@Primary - A bean should be given preference when multiple candidates are qualified.
@Qualifier - A specific bean should be auto-wired(name of the bean can be used as qualifier)


Dependency Injection Types:
1. Constructor based: dependencies are set by creating the Bean using its Constructor.
2. Setter-based: Dependencies are set by calling setter methods on your beans.
3. Field: No setter or constructor. Dependency is injected using reflection.

Which one to use? 
Spring team recommends Constructor-based injection as dependencies are automatically set when an object is created.


Important Terminology -
1. @Component (..): An instance of class will be managed by Spring framework.
2. Dependency: GameRunner needs GamingConsole impl, i.e., GamingConsole impl (e.g. MarioGame) is a dependency of GameRunner.
3. Component Scan: spring framework search and find component class. It scans packages (@ComponentScan("packagename"))
4. Dependency Injection: identify beans, their dependencies and wire them together (provides IOC - inversion of control)
5. Autowiring: process of wiring in dependencies for a Spring Bean


@Component vs @Bean

Heading 		@Component			@Bean
where?		can be used on any java class	    Typically used on methods in Spring
                                                    Configuration classes

Ease of use	very easy. just add annotation	     you write all the code

Autowiring	Yes-Field, Setter or Constructor     Yes-method call or method parameters
		injection

who creates       	Spring Framework              You write bean creation code
beans?

Recommended     Instantiating Beans for your own     1. Custom business logic
For             Application code: @Component         2. Instantiating Beans for 3rd-party
							libraries: @Bean


Default initialization for Spring Beans: Eager
Eager initialization is recommended:
	> errors in the configuration are discovered immediately at application startup

Heading 		Lazy Initialization		Eager Initialization
Initialization     Bean initialized when it is first    Bean initialized at startup of the
Time               made use of in the application       application

Default		   	NOT Default				Default

Code Snippet	   @Lazy or @Lazy(value=true)		@Lazy(value=false) OR (absence of 
								@Lazy)

What happens if    Errors will result in                Errors will prevent application
there are errors   runtime exceptions                    from starting up
in initializing?

Usage		     Rarely used			Frequently used

Memory utilization  less (until bean is initialized)   All beans are initialized at startup

Recommended         Beans very rarely used in your app		Most of your beans
scenario

1. Lazy Initialization (@Lazy) - indicates whether a bean is to be lazily initialized. May be used on any class directly or indirectly annotated  with @Component or on methods annotated with @Bean


2. Bean Scopes:
Singleton - One object instance per Spring IOC Container
Prototype - Possibly many object instances per Spring IOC Container

Scopes applicable only for web-aware Spring ApplicationContext
> Request - one object instance per single HTTP request
> Session - one object instance per user HTTP request
> Application - One object instance per web application runtime
> WebSocket - one object instance per websocket instance

By default all the beans created are singletons.
If you want different instances to be created then go for PROTOTYPE:
	@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)


3. PostConstruct & PreDestroy
@PostConstruct - The PostConstruct annotation is used on a method that needs to be executed after dependency injection is done to perform any initialization. This method must be invoked before the class is put into service. This annotation must be supported on all classes that support dependency injection. The method annotated with PostConstruct must be invoked even if the class does not request any resources to be injected. Only one method in a given class can be annotated with this annotation. 

@PreDestroy - The PreDestroy annotation is used on a method as a callback notification to signal that the instance is in the process of being removed by the container. The method annotated with PreDestroy is typically used to release resources that it has been holding. 

4. Jakarta EE
5. Jakarta Contexts & Dependency Injection (CDI)

6. XML Configuration
7. Alternatives - @Component
8. Spring Big Picture
9. Spring Modules & Projects
10. Why is Spring popular?

Spring Stereotype Annotations - @Component & more...

@Component - Generic annotation applicable for any class
a. base for Spring Stereotype Annotations
b. Specializations of @Component:
	>@Service: indicated that an annotated class has business logic
	>@Controller: indicates that annotated class is a "Controller" (e.g. a web controller) - used to define controllers in your web application and REST API
	>@Repository: indicates that an annotated class is used to retrieve and/or manipulate data in a database.  


Spring Big Picture - Framework and Modules
Spring Framework contains multiple Spring Modules
Spring Projects:	
	>First project: Spring Framework
	>Spring Security: secure your web application or REST API or microservice
	>Spring Data: integrate the same way with different types of databases: NoSQL and Relational
	>Spring integration: Address challenges with integration with other applications
	>Spring Boot: Popular framework to build microservices
	>Spring cloud: build cloud native applications

Maven Build Life Cycle:
>Validate
>Compile
>Test
>Package
>Integration test
>Verify 
>Install
>Deploy

Maven Commands:
1. mvn --version
2. mvn compile: compile source files
3. mvn test-compile: compile test files
4. mvn clean: delete target directory
5. mvn test: run unit tests
6. mvn package: create a jar
7. mvn help: effective-pom
8. mvn dependency:tree

Goal of Spring Boot:
> Help you build PRODUCTION-READY apps QUICKLY
	BUILD QUICKLY
		>Spring Initializr
		>Spring Boot Starter Projects
		>Spring Boot Auto Configuration	
		>Spring Boot DevTools
	PRODUCTION-READY
		>Different configuration for different environments
			(Profiles, ConfigurationProperties)
		>Monitoring (Spring Boot Actuator)

Spring Boot DevTools: Increase developer productivity

Logging Levels:
trace, debug, info, warning, error, off

Monitor Applications using Spring Boot Actuator
> Monitor and manage your application in your production
> Provides a number of endpoints:
	beans - complete list of Spring beans in your app
	health - application health information
	metrics - application metrics
	mappings - details around request mappings

JPA and Hibernate
Approach as per Udemy course:
1. Create a Spring Boot project with H2
2. Create COURSE table
3. Use Spring JDBC to play with COURSE table
4. Use JPA and Hibernate to play with COURSE table
5. Use Spring Data JPA to play with COURSE table

JSP Files should be created in /src/main/resources/META-INF/resources/WEB-INF/jsp/filename.jsp





























